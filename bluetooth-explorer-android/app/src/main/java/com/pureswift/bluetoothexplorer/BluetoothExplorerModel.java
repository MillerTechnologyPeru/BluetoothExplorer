// Generated by jextract-swift
// Swift module: BluetoothExplorerModel

package ;

import org.swift.swiftkit.core.*;
import org.swift.swiftkit.core.util.*;
import org.swift.swiftkit.ffm.*;
import org.swift.swiftkit.ffm.SwiftRuntime;
import java.lang.foreign.*;
import java.lang.invoke.*;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.concurrent.atomic.*;
import java.nio.charset.StandardCharsets;

public final class BluetoothExplorerModel {
  private BluetoothExplorerModel() {
    // Should not be called directly
  }
  
  // Static enum to force initialization
  private static enum Initializer {
    FORCE; // Refer to this to force outer Class initialization (and static{} blocks to trigger)
  }
  static final String LIB_NAME = "BluetoothExplorerModel";
  static final Arena LIBRARY_ARENA = Arena.ofAuto();
  static MemorySegment findOrThrow(String symbol) {
      return SYMBOL_LOOKUP.find(symbol)
              .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: %s".formatted(symbol)));
  }
  static MemoryLayout align(MemoryLayout layout, long align) {
      return switch (layout) {
          case PaddingLayout p -> p;
          case ValueLayout v -> v.withByteAlignment(align);
          case GroupLayout g -> {
              MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                      .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
              yield g instanceof StructLayout ?
                      MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
          }
          case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
      };
  }
  static final SymbolLookup SYMBOL_LOOKUP = getSymbolLookup();
  private static SymbolLookup getSymbolLookup() {
      // Ensure Swift and our Lib are loaded during static initialization of the class.
      SwiftLibraries.loadLibrary("swiftCore");
      SwiftLibraries.loadLibrary("SwiftKitSwift");
      SwiftLibraries.loadLibrary(LIB_NAME);
  
      if (PlatformUtils.isMacOS()) {
          return SymbolLookup.libraryLookup(System.mapLibraryName(LIB_NAME), LIBRARY_ARENA)
                  .or(SymbolLookup.loaderLookup())
                  .or(Linker.nativeLinker().defaultLookup());
      } else {
          return SymbolLookup.loaderLookup()
                  .or(Linker.nativeLinker().defaultLookup());
      }
  }
} // printModuleClass(_:body:) @ JExtractSwiftLib/FFMSwift2JavaGenerator.swift:286
